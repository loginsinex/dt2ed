/*
    A NES Duck Tales 2 Level Editor [public version]
    Copyright (C) 2015 ALXR aka loginsin
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "precomp.h"

const COLORREF g_crNesColor[] =
{
		XCHGCOLORREF( 0x00747474),
		XCHGCOLORREF( 0x008C1824),
		XCHGCOLORREF( 0x00A80000),
		XCHGCOLORREF( 0x009C0044),
		XCHGCOLORREF( 0x0074008C),
		XCHGCOLORREF( 0x001000A8),
		XCHGCOLORREF( 0x000000A4),
		XCHGCOLORREF( 0x0000087C),
		XCHGCOLORREF( 0x00002C40),
		XCHGCOLORREF( 0x00004400),
		XCHGCOLORREF( 0x00005000),
		XCHGCOLORREF( 0x00143C00),
		XCHGCOLORREF( 0x005C3C18),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00BCBCBC),
		XCHGCOLORREF( 0x00EC7000),
		XCHGCOLORREF( 0x00EC3820),
		XCHGCOLORREF( 0x00F00080),
		XCHGCOLORREF( 0x00BC00BC),
		XCHGCOLORREF( 0x005800E4),
		XCHGCOLORREF( 0x000028D8),
		XCHGCOLORREF( 0x000C4CC8),
		XCHGCOLORREF( 0x00007088),
		XCHGCOLORREF( 0x00009400),
		XCHGCOLORREF( 0x0000A800),
		XCHGCOLORREF( 0x00389000),
		XCHGCOLORREF( 0x00888000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00FCFCFC),
		XCHGCOLORREF( 0x00FCBC3C),
		XCHGCOLORREF( 0x00FC945C),
		XCHGCOLORREF( 0x00FC8840),
		XCHGCOLORREF( 0x00FC78F4),
		XCHGCOLORREF( 0x00B474FC),
		XCHGCOLORREF( 0x006074FC),
		XCHGCOLORREF( 0x003898FC),
		XCHGCOLORREF( 0x003CBCF0),
		XCHGCOLORREF( 0x0010D080),
		XCHGCOLORREF( 0x0048DC4C),
		XCHGCOLORREF( 0x0098F858),
		XCHGCOLORREF( 0x00D8E800),
		XCHGCOLORREF( 0x00787878),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00FCFCFC),
		XCHGCOLORREF( 0x00FCE4A8),
		XCHGCOLORREF( 0x00FCD4C4),
		XCHGCOLORREF( 0x00FCC8D4),
		XCHGCOLORREF( 0x00FCC4FC),
		XCHGCOLORREF( 0x00D8C4FC),
		XCHGCOLORREF( 0x00B0BCFC),
		XCHGCOLORREF( 0x00A8D8FC),
		XCHGCOLORREF( 0x00A0E4FC),
		XCHGCOLORREF( 0x00A0FCE0),
		XCHGCOLORREF( 0x00BCF0A8),
		XCHGCOLORREF( 0x00CCFCB0),
		XCHGCOLORREF( 0x00F0FC9C),
		XCHGCOLORREF( 0x00C4C4C4),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00747474),
		XCHGCOLORREF( 0x008C1824),
		XCHGCOLORREF( 0x00A80000),
		XCHGCOLORREF( 0x009C0044),
		XCHGCOLORREF( 0x0074008C),
		XCHGCOLORREF( 0x001000A8),
		XCHGCOLORREF( 0x000000A4),
		XCHGCOLORREF( 0x0000087C),
		XCHGCOLORREF( 0x00002C40),
		XCHGCOLORREF( 0x00004400),
		XCHGCOLORREF( 0x00005000),
		XCHGCOLORREF( 0x00143C00),
		XCHGCOLORREF( 0x005C3C18),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00BCBCBC),
		XCHGCOLORREF( 0x00EC7000),
		XCHGCOLORREF( 0x00EC3820),
		XCHGCOLORREF( 0x00F00080),
		XCHGCOLORREF( 0x00BC00BC),
		XCHGCOLORREF( 0x005800E4),
		XCHGCOLORREF( 0x000028D8),
		XCHGCOLORREF( 0x000C4CC8),
		XCHGCOLORREF( 0x00007088),
		XCHGCOLORREF( 0x00009400),
		XCHGCOLORREF( 0x0000A800),
		XCHGCOLORREF( 0x00389000),
		XCHGCOLORREF( 0x00888000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00FCFCFC),
		XCHGCOLORREF( 0x00FCBC3C),
		XCHGCOLORREF( 0x00FC945C),
		XCHGCOLORREF( 0x00FC8840),
		XCHGCOLORREF( 0x00FC78F4),
		XCHGCOLORREF( 0x00B474FC),
		XCHGCOLORREF( 0x006074FC),
		XCHGCOLORREF( 0x003898FC),
		XCHGCOLORREF( 0x003CBCF0),
		XCHGCOLORREF( 0x0010D080),
		XCHGCOLORREF( 0x0048DC4C),
		XCHGCOLORREF( 0x0098F858),
		XCHGCOLORREF( 0x00D8E800),
		XCHGCOLORREF( 0x00787878),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00FCFCFC),
		XCHGCOLORREF( 0x00FCE4A8),
		XCHGCOLORREF( 0x00FCD4C4),
		XCHGCOLORREF( 0x00FCC8D4),
		XCHGCOLORREF( 0x00FCC4FC),
		XCHGCOLORREF( 0x00D8C4FC),
		XCHGCOLORREF( 0x00B0BCFC),
		XCHGCOLORREF( 0x00A8D8FC),
		XCHGCOLORREF( 0x00A0E4FC),
		XCHGCOLORREF( 0x00A0FCE0),
		XCHGCOLORREF( 0x00BCF0A8),
		XCHGCOLORREF( 0x00CCFCB0),
		XCHGCOLORREF( 0x00F0FC9C),
		XCHGCOLORREF( 0x00C4C4C4),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00747474),
		XCHGCOLORREF( 0x008C1824),
		XCHGCOLORREF( 0x00A80000),
		XCHGCOLORREF( 0x009C0044),
		XCHGCOLORREF( 0x0074008C),
		XCHGCOLORREF( 0x001000A8),
		XCHGCOLORREF( 0x000000A4),
		XCHGCOLORREF( 0x0000087C),
		XCHGCOLORREF( 0x00002C40),
		XCHGCOLORREF( 0x00004400),
		XCHGCOLORREF( 0x00005000),
		XCHGCOLORREF( 0x00143C00),
		XCHGCOLORREF( 0x005C3C18),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00BCBCBC),
		XCHGCOLORREF( 0x00EC7000),
		XCHGCOLORREF( 0x00EC3820),
		XCHGCOLORREF( 0x00F00080),
		XCHGCOLORREF( 0x00BC00BC),
		XCHGCOLORREF( 0x005800E4),
		XCHGCOLORREF( 0x000028D8),
		XCHGCOLORREF( 0x000C4CC8),
		XCHGCOLORREF( 0x00007088),
		XCHGCOLORREF( 0x00009400),
		XCHGCOLORREF( 0x0000A800),
		XCHGCOLORREF( 0x00389000),
		XCHGCOLORREF( 0x00888000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00FCFCFC),
		XCHGCOLORREF( 0x00FCBC3C),
		XCHGCOLORREF( 0x00FC945C),
		XCHGCOLORREF( 0x00FC8840),
		XCHGCOLORREF( 0x00FC78F4),
		XCHGCOLORREF( 0x00B474FC),
		XCHGCOLORREF( 0x006074FC),
		XCHGCOLORREF( 0x003898FC),
		XCHGCOLORREF( 0x003CBCF0),
		XCHGCOLORREF( 0x0010D080),
		XCHGCOLORREF( 0x0048DC4C),
		XCHGCOLORREF( 0x0098F858),
		XCHGCOLORREF( 0x00D8E800),
		XCHGCOLORREF( 0x00787878),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00FCFCFC),
		XCHGCOLORREF( 0x00FCE4A8),
		XCHGCOLORREF( 0x00FCD4C4),
		XCHGCOLORREF( 0x00FCC8D4),
		XCHGCOLORREF( 0x00FCC4FC),
		XCHGCOLORREF( 0x00D8C4FC),
		XCHGCOLORREF( 0x00B0BCFC),
		XCHGCOLORREF( 0x00A8D8FC),
		XCHGCOLORREF( 0x00A0E4FC),
		XCHGCOLORREF( 0x00A0FCE0),
		XCHGCOLORREF( 0x00BCF0A8),
		XCHGCOLORREF( 0x00CCFCB0),
		XCHGCOLORREF( 0x00F0FC9C),
		XCHGCOLORREF( 0x00C4C4C4),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00747474),
		XCHGCOLORREF( 0x008C1824),
		XCHGCOLORREF( 0x00A80000),
		XCHGCOLORREF( 0x009C0044),
		XCHGCOLORREF( 0x0074008C),
		XCHGCOLORREF( 0x001000A8),
		XCHGCOLORREF( 0x000000A4),
		XCHGCOLORREF( 0x0000087C),
		XCHGCOLORREF( 0x00002C40),
		XCHGCOLORREF( 0x00004400),
		XCHGCOLORREF( 0x00005000),
		XCHGCOLORREF( 0x00143C00),
		XCHGCOLORREF( 0x005C3C18),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00BCBCBC),
		XCHGCOLORREF( 0x00EC7000),
		XCHGCOLORREF( 0x00EC3820),
		XCHGCOLORREF( 0x00F00080),
		XCHGCOLORREF( 0x00BC00BC),
		XCHGCOLORREF( 0x005800E4),
		XCHGCOLORREF( 0x000028D8),
		XCHGCOLORREF( 0x000C4CC8),
		XCHGCOLORREF( 0x00007088),
		XCHGCOLORREF( 0x00009400),
		XCHGCOLORREF( 0x0000A800),
		XCHGCOLORREF( 0x00389000),
		XCHGCOLORREF( 0x00888000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00FCFCFC),
		XCHGCOLORREF( 0x00FCBC3C),
		XCHGCOLORREF( 0x00FC945C),
		XCHGCOLORREF( 0x00FC8840),
		XCHGCOLORREF( 0x00FC78F4),
		XCHGCOLORREF( 0x00B474FC),
		XCHGCOLORREF( 0x006074FC),
		XCHGCOLORREF( 0x003898FC),
		XCHGCOLORREF( 0x003CBCF0),
		XCHGCOLORREF( 0x0010D080),
		XCHGCOLORREF( 0x0048DC4C),
		XCHGCOLORREF( 0x0098F858),
		XCHGCOLORREF( 0x00D8E800),
		XCHGCOLORREF( 0x00787878),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00FCFCFC),
		XCHGCOLORREF( 0x00FCE4A8),
		XCHGCOLORREF( 0x00FCD4C4),
		XCHGCOLORREF( 0x00FCC8D4),
		XCHGCOLORREF( 0x00FCC4FC),
		XCHGCOLORREF( 0x00D8C4FC),
		XCHGCOLORREF( 0x00B0BCFC),
		XCHGCOLORREF( 0x00A8D8FC),
		XCHGCOLORREF( 0x00A0E4FC),
		XCHGCOLORREF( 0x00A0FCE0),
		XCHGCOLORREF( 0x00BCF0A8),
		XCHGCOLORREF( 0x00CCFCB0),
		XCHGCOLORREF( 0x00F0FC9C),
		XCHGCOLORREF( 0x00C4C4C4),
		XCHGCOLORREF( 0x00000000),
		XCHGCOLORREF( 0x00000000)
};

CNesEditor::CNesEditor()
	: m_nCurrentLevel( -1 )
{
	ZeroMemory(m_nLevel.pbRooms, sizeof(m_nLevel.pbRooms));
	ZeroMemory(m_vpbmObj, sizeof(m_vpbmObj));
	ZeroMemory(m_vpbmScr, sizeof(m_vpbmScr));
//	ZeroMemory(&m_nGame, sizeof(m_nGame));
	ZeroMemory(m_nGame.bBgTiles, sizeof(m_nGame.bBgTiles));
	ZeroMemory(&m_nGame.bDrawMask, sizeof(m_nGame.bDrawMask));
	ZeroMemory(m_nGame.bEgyptCode, sizeof(m_nGame.bEgyptCode));
	ZeroMemory(m_nGame.sDecodedLevelName, sizeof(m_nGame.sDecodedLevelName));
	ZeroMemory(m_nGame.sLevelName, sizeof(m_nGame.sLevelName));
	m_nGame.nMuSecret.bObjId = m_nGame.nMuSecret.bPosY = 0;
	m_nGame.nMuSecret.fVertical = FALSE;


	for(INT i = 0; i < 16; ++i)
	{
		m_nLevel.bmMask[i].Create(16, 16);
		m_nLevel.bmMask[i].FillRect(0, 0, 16, 16, RGB( i << 4, i << 4, i << 4 ), 0, 0, 50);
	}
}

CNesEditor::~CNesEditor()
{
	FreeLevel();

	for(size_t n = 0; n < 0x100; ++n)
		if ( m_vpbmObj[n] )
			delete m_vpbmObj[n];

	for(size_t n = 0; n < 3; ++n)
		if ( m_vpbmScr[n] )
			delete m_vpbmScr[n];

}

BOOL CNesEditor::LoadSprites(CTilesCreator & tiles, CTilesCreator & tilesScrooge)
{
	for(size_t n = 0; n < 0x100; ++n)
		if ( m_vpbmObj[n] )
			delete m_vpbmObj[n];

	for(size_t n = 0; n < 3; ++n)
		if ( m_vpbmScr[n] )
			delete m_vpbmScr[n];

	CFont fnt(-13, TRUE, FALSE, FALSE, FALSE, TEXT("Tahoma"), 0);
	CFont fntg(-9, TRUE, FALSE, FALSE, FALSE, TEXT("Tahoma"), 0);

	tilesScrooge.LoadTiles(RGB(168, 228, 252), m_vpbmScr);
	tiles.LoadTiles(RGB(168, 228, 252), m_vpbmObj);

	for(size_t n = 0; n < 0x101; ++n)
	{
		if ( m_vpbmObj[n] )
		{
			CTilesImage bmi(*m_vpbmObj[n]);
			m_rcObj[n] = bmi.GetObjectRect();
			continue;
		}

		CBitmap * pbm = new CBitmap;

		if ( n < 0x99 )
		{
			CString sz;
			sz.Format(TEXT("%02X"), n);
			pbm->Create(128, 128);
			pbm->FillRect(0, 0, pbm->Width(), pbm->Height(), RGB(168, 228, 252), 0, 0);
			pbm->FillRect(64, 64, 20, 20, RGB(0xFF, 0xFF, 0xFF), 0, 0);
			pbm->RenderText(64, 64, 20, 20, (LPTSTR) sz.GetString(), fnt, TRUE, RGB(1, 1, 1), 0, DT_SINGLELINE | DT_CENTER | DT_VCENTER);			
		}
		else if ( n >= 0x99 && n <= 0x9c )
		{
			CString sz;
			sz.Format(TEXT("P%01X"), n - 0x99);
			pbm->Create(128, 128);
			pbm->FillRect(0, 0, pbm->Width(), pbm->Height(), RGB(168, 228, 252), 0, 0);
			pbm->FillRect(84, 84, 20, 20, RGB(0xFF, 0xFF, 0), 0, 0);
			pbm->RenderText(84, 84, 20, 20, (LPTSTR) sz.GetString(), fnt, TRUE, RGB(1, 1, 1), 0, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
		}
		else if ( n >= 0x9d && n <= 0xFF )
		{
			int g = n - 0x9d;

			CString sz;
			sz.Format(TEXT("L %d\nG %01X"), g / 8 + 1, g % 8);
			pbm->Create(128, 128);
			pbm->FillRect(0, 0, pbm->Width(), pbm->Height(), RGB(168, 228, 252), 0, 0);
			pbm->FillRect(64, 64, 22, 22, RGB(0, 0xFF, 0), 0, 0);
			pbm->RenderText(64, 64, 22, 22, (LPTSTR) sz.GetString(), fntg, TRUE, RGB(1, 1, 1), 0, DT_CENTER);
		}
		else if ( n >= 0x100 )
		{
			pbm->Create(128, 128);
			pbm->FillRect(0, 0, pbm->Width(), pbm->Height(), RGB(168, 228, 252), 0, 0);
			pbm->FillRect(64, 64, 20, 20, RGB(0xFF, 0, 0), 0, 0);
			pbm->RenderText(64, 64, 20, 20, TEXT("CR"), fnt, TRUE, RGB(1, 1, 1), 0, DT_CENTER | DT_VCENTER | DT_SINGLELINE);
		}

		m_vpbmObj[n] = pbm;

		CTilesImage bmi(*pbm);
		m_rcObj[n] = bmi.GetObjectRect();
	}

	return TRUE;
}
